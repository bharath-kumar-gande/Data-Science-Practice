import pandas as pd
from sklearn import preprocessing, decomposition, tree
import numpy as np

train_data = pd.read_csv('/Users/bharath/Desktop/Folder/Data Science/Projects/prudential-life-insurance-assessment/train.csv')
test_data = pd.read_csv('/Users/bharath/Desktop/Folder/Data Science/Projects/prudential-life-insurance-assessment/test.csv')

total_data = pd.concat([train_data, test_data])
train_data.shape
#print(total_data)
train_data.shape

total_data.shape
train_data.info()
total_data1 = total_data.drop(['Product_Info_2','Medical_History_1', 'Medical_History_10', 'Medical_History_15', 'Medical_History_24', 'Medical_History_32'], axis=1)
total_data1.shape
#print(total_data1)

# Check for numeric and chategorical columns
#previous_num_columns = total_data1.select_dtypes(exclude=['object']).columns.values.tolist()
#print(previous_num_columns)

Imputer = preprocessing.Imputer(strategy='mean')
Imputer.fit(total_data1)
X = Imputer.transform(total_data1)
total_data_tr = pd.DataFrame(X, columns=total_data1.columns)
#total_missing = total_data_tr.isnull().any().sum()
#print(total_missing)
#X.shape
y_impute = total_data_tr['Response']
x_impute = total_data_tr.drop('Response',axis=1)
y_train = y_impute[0:train_data.shape[0]]

Scaler = preprocessing.StandardScaler()
Scaler.fit(x_impute)
X_scaled = Scaler.transform(x_impute)
X_scaled_df = pd.DataFrame(X_scaled, columns = x_train.columns)
X_scaled.shape
total_missing1 = X_scaled_df.isnull().any().sum()
print(total_missing1)

pca = decomposition.PCA(n_components=10)
pca.fit(X_scaled)
x_transformed = pca.transform(X_scaled)
x_transformed.shape

X_train = x_transformed[0:train_data.shape[0]]
X_train.shape
X_test = x_transformed[train_data.shape[0]:]
X_test.shape
#total_data_X = pd.DataFrame(X_train, columns=total_data1.columns)
#total_missing = total_data_tr.isnull().any().sum()
#print(total_missing)

dt = tree.DecisionTreeClassifier()
dt.fit(X_train,y_train)

dt.score(X_train,y_train)

test_data['Response'] = dt.predict(X_test)

#test_data.to_csv("Prudential.csv",columns=['Id','Survived'],index=False)
